// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  full_name         String
  bio               String?
  handle            String?        @unique
  fcm_token         String?
  avatar_url        String?
  cover_photo_url   String?
  token             String?
  act_token         String?
  isVerified        Boolean        @default(false)
  followers         Follow[]       @relation("Followers")
  following         Follow[]       @relation("Following")
  numberOfFollower  Int            @default(0)
  numberOfFollowing Int            @default(0)
  city              String?
  country           String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  numberOfSaves     Int            @default(0)
  blogs             Blog[]
  vlogs             Vlog[]
  posts             Post[]
  ReactBlog         ReactBlog[]
  BlogComment       BlogComment[]
  SaveBlog          SaveBlog[]
  ReactVlog         ReactVlog[]
  CommentVlog       CommentVlog[]
  SaveVlog          SaveVlog[]
  SaveUsers         SaveUser[]     @relation("SavedUser")
  CurrentUser       SaveUser[]     @relation("CurrentUser")
  ViewVlog          ViewVlog[]
  UserBlocked       UserBlocked[]
  chats             Chat[]         @relation("participants")
  ChatMessage       ChatMessage[]
  UserSetting       UserSetting[]
  Notification      Notification[]
  CommentPost       CommentPost[]
  SavePost          SavePost[]
}

model UserBlocked {
  id            Int      @id @default(autoincrement())
  userId        Int
  userBlockedId Int
  userBlocked   User     @relation(fields: [userBlockedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  Int
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // @@unique([followerId, followingId], name: "unique_followers_following")
}

model Blog {
  id               Int           @id @default(autoincrement())
  body             String
  title            String
  tags             String?
  city             String?
  image_url        String?
  country          String?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  numberOfLikes    Int           @default(0)
  numberOfShares   Int           @default(0)
  numberOfComments Int           @default(0)
  numberOfSaves    Int           @default(0)
  ReactBlog        ReactBlog[]
  BlogComment      BlogComment[]
  SaveBlog         SaveBlog[]
}

model ReactBlog {
  id             Int      @id @default(autoincrement())
  blogId         Int
  blog           Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createByUserId Int
  user           User     @relation(fields: [createByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model BlogComment {
  id             Int      @id @default(autoincrement())
  content        String?
  blogId         Int
  blog           Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createByUserId Int
  user           User     @relation(fields: [createByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Vlog {
  id               Int           @id @default(autoincrement())
  title            String
  description      String
  video_url        String?
  thumbnail_url    String?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int
  numberOfLikes    Int           @default(0)
  numberOfShares   Int           @default(0)
  numberOfComments Int           @default(0)
  numberOfSaves    Int           @default(0)
  numberOfViews    Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  ReactVlog        ReactVlog[]
  CommentVlog      CommentVlog[]
  SaveVlog         SaveVlog[]
  ViewVlog         ViewVlog[]
}

model Post {
  id               Int           @id @default(autoincrement())
  caption          String
  image_url        String?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int
  numberOfLikes    Int           @default(0)
  numberOfShares   Int           @default(0)
  numberOfComments Int           @default(0)
  numberOfSaves    Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  CommentPost      CommentPost[]
  SavePost         SavePost[]
}

model CommentPost {
  id             Int      @id @default(autoincrement())
  content        String?
  postId         Int
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createByUserId Int
  user           User     @relation(fields: [createByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model SavePost {
  id           Int      @id @default(autoincrement())
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saveByUserId Int
  user         User     @relation(fields: [saveByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model SaveBlog {
  id           Int      @id @default(autoincrement())
  blogId       Int
  blog         Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saveByUserId Int
  user         User     @relation(fields: [saveByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model ReactVlog {
  id             Int      @id @default(autoincrement())
  vlogId         Int
  vlog           Vlog     @relation(fields: [vlogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createByUserId Int
  user           User     @relation(fields: [createByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model CommentVlog {
  id             Int      @id @default(autoincrement())
  content        String?
  vlogId         Int
  vlog           Vlog     @relation(fields: [vlogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createByUserId Int
  user           User     @relation(fields: [createByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model SaveVlog {
  id           Int      @id @default(autoincrement())
  vlogId       Int
  vlog         Vlog     @relation(fields: [vlogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saveByUserId Int
  user         User     @relation(fields: [saveByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model SaveUser {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation("SavedUser", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saveByUserId Int
  saveByUser   User     @relation("CurrentUser", fields: [saveByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model ViewVlog {
  id           Int      @id @default(autoincrement())
  vlogId       Int
  vlog         Vlog     @relation(fields: [vlogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  viewByUserId Int
  user         User     @relation(fields: [viewByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Chat {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  // isGroupChat  Boolean  @default(false)
  lastMessage   ChatMessage?  @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId Int?          @unique
  participants  User[]        @relation("participants")
  // admin        User          @relation(fields: [adminId], references: [id])
  // adminId      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  ChatMessage   ChatMessage[] @relation("ChatMessages")
}

model ChatMessage {
  id              Int     @id @default(autoincrement())
  content         String?
  sender          User    @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId        Int
  chat            Chat    @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId          Int
  lastMessageChat Chat?   @relation("LastMessage")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserSetting {
  id               Int     @id @default(autoincrement())
  lastSeen         Boolean @default(true)
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int
  commentsAllowed  Boolean @default(true)
  chatNotification Boolean @default(true)
  feedNotification Boolean @default(true)
}

model Notification {
  id        Int      @id @default(autoincrement())
  byUser    User     @relation(fields: [byUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byUserId  Int
  toUserId  Int
  isRead    Boolean  @default(false)
  content   String?
  data      Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
